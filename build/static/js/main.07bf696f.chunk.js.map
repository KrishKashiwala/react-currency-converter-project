{"version":3,"sources":["Currency.js","App.js","reportWebVitals.js","index.js"],"names":["Currency","currencyOptions","selectedCurrency","onChangeCurrency","amount","onChangeAmount","className","value","onChange","map","option","URL","App","useState","setCurrencyOptions","toCurrency","setToCurrency","fromCurrency","setFromCurrency","exchangeRates","setExchangeRates","setAmount","amountInFromCurrency","setAmountInFromCurrency","toAmount","fromAmount","useEffect","fetch","then","res","json","data","firstCurrency","Object","keys","rates","base","e","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAmBeA,EAjBE,SAAC,GAAuF,IAAtFC,EAAqF,EAArFA,gBAAkBC,EAAmE,EAAnEA,iBAAmBC,EAAgD,EAAhDA,iBAAmBC,EAA6B,EAA7BA,OAASC,EAAoB,EAApBA,eAElF,OAEE,qCAGQ,uBAAQC,UAAY,WAAWC,MAASH,EAAQI,SAAYH,IAC5D,wBAAQE,MAASL,EAAkBM,SAAYL,EAA/C,SACCF,EAAgBQ,KAAI,SAAAC,GAAM,OACzB,wBAAQH,MAAOG,EAAf,SAAuCA,GAATA,YCTtCC,EAAM,qCA6HGC,MA5Hf,WAAgB,IAAD,EACkCC,mBAAS,IAD3C,mBACNZ,EADM,KACYa,EADZ,OAEwBD,qBAFxB,mBAENE,EAFM,KAEOC,EAFP,OAG2BH,qBAH3B,mBAGNI,EAHM,KAGQC,EAHR,OAI8BL,qBAJ9B,mBAINM,EAJM,KAIUC,EAJV,OAKgBP,mBAAS,GALzB,mBAKNT,EALM,KAKGiB,EALH,OAM4CR,oBAAS,GANrD,mBAMNS,EANM,KAMiBC,EANjB,KAQTC,EAAW,EAAKC,EAAa,EAiCjC,OAhCGH,GACCG,EAAarB,EACboB,EAAWpB,EAASe,IAEpBK,EAAWpB,EACXqB,EAAcrB,EAAOe,GAEzBO,qBAAU,WACNC,MAAMhB,GAAKiB,MAAK,SAACC,GAAD,OAASA,EAAIC,UAAQF,MAAK,SAACG,GACvC,IAAOC,EAAgBC,OAAOC,KAAKH,EAAKI,OAAO,GAC/CrB,EAAmB,CAACiB,EAAKK,MAAP,mBAAiBH,OAAOC,KAAKH,EAAKI,UACpDjB,EAAgBa,EAAKK,MACrBpB,EAAcgB,GACdZ,EAAiBW,EAAKI,MAAMH,SAEhC,IACJN,qBAAU,WACY,MAAhBT,GAAsC,MAAdF,GAC1BY,MAAM,GAAD,OAAIhB,EAAJ,iBAAgBM,EAAhB,oBAAwCF,IAC1Ca,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIX,EAAiBW,EAAKI,MAAMpB,SAE7C,CAACE,EAAcF,IAWd,qCACE,yCACE,cAAC,EAAD,CACCd,gBAAmBA,EAClBC,iBAAoBe,EACnBd,iBAAoB,SAAAkC,GAAC,OAAInB,EAAgBmB,EAAEC,OAAO/B,QAClDF,eAfX,SAA6BgC,GACvBhB,EAAUgB,EAAEC,OAAO/B,OACnBgB,GAAwB,IAcrBnB,OAAUqB,IAEX,oBAAInB,UAAW,OAAf,eACA,cAAC,EAAD,CACAL,gBAAmBA,EAClBC,iBAAoBa,EACnBZ,iBAAoB,SAAAkC,GAAC,OAAIrB,EAAcqB,EAAEC,OAAO/B,QAChDH,OAAUoB,EACVnB,eApBR,SAA2BgC,GACvBhB,EAAUgB,EAAEC,OAAO/B,OACnBgB,GAAwB,UC/BjBgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.07bf696f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Currency = ({currencyOptions , selectedCurrency , onChangeCurrency , amount , onChangeAmount}) => {\r\n\r\n  return (\r\n    \r\n    <>  \r\n            \r\n            \r\n            <input  className = \"inputTag\" value = {amount} onChange = {onChangeAmount}/>\r\n            <select value = {selectedCurrency} onChange = {onChangeCurrency}>\r\n            {currencyOptions.map(option  => (\r\n              <option value={option} key = {option}>{option}</option>\r\n            ))}     \r\n            </select>\r\n    </>\r\n  )\r\n} \r\n\r\nexport default Currency\r\n","import React , {useEffect , useState} from 'react'\nimport './App.css';\nimport Currency from './Currency'\nconst URL = \"https://api.ratesapi.io/api/latest\";\nfunction App() {\n  const [currencyOptions , setCurrencyOptions] = useState([])\n  const [toCurrency , setToCurrency] = useState();\n  const [fromCurrency, setFromCurrency] = useState()\n  const [exchangeRates , setExchangeRates] = useState()\n  const [amount , setAmount] = useState(1)\n  const [amountInFromCurrency , setAmountInFromCurrency]  =useState(true)\n  \n  let toAmount = 0 ,  fromAmount = 0;\n  if(amountInFromCurrency){\n      fromAmount = amount\n      toAmount = amount * exchangeRates\n  }else{\n      toAmount = amount\n      fromAmount  = amount/exchangeRates\n  }\n  useEffect(() =>{\n      fetch(URL).then((res) => res.json()).then((data) => {\n          const  firstCurrency = Object.keys(data.rates)[0]\n          setCurrencyOptions([data.base , ...Object.keys(data.rates)])\n          setFromCurrency(data.base)\n          setToCurrency(firstCurrency);\n          setExchangeRates(data.rates[firstCurrency])\n      })\n  } , []) \n  useEffect(() => {\n    if (fromCurrency != null && toCurrency != null) {\n      fetch(`${URL}?base=${fromCurrency}&symbols=${toCurrency}`)\n        .then(res => res.json())\n        .then(data => setExchangeRates(data.rates[toCurrency]))\n    }\n  }, [fromCurrency, toCurrency])\n\n  function onFromChangeAmount (e) {\n        setAmount(e.target.value);\n        setAmountInFromCurrency(true)\n    }\n    function onToChangeAmount (e) {\n        setAmount(e.target.value);\n        setAmountInFromCurrency(false)\n    }\n  return (\n      <>\n        <h1>Convert</h1>\n          <Currency\n           currencyOptions = {currencyOptions}\n            selectedCurrency = {fromCurrency}\n             onChangeCurrency = {e => setFromCurrency(e.target.value)}\n             onChangeAmount = {onFromChangeAmount}\n           amount = {fromAmount}/>\n          \n          <h1 className= \"htag\">=</h1>\n          <Currency \n          currencyOptions = {currencyOptions}\n           selectedCurrency = {toCurrency}\n            onChangeCurrency = {e => setToCurrency(e.target.value)}\n            amount = {toAmount}\n            onChangeAmount = {onToChangeAmount}\n            />\n      </> \n  ); \n\n    // const [currencyOptions , setCurrencyOptions] = useState([])\n    // const [fromCurrency , setFromCurrency] = useState()\n    // const [toCurrency , setToCurrency] = useState()\n    // const [exchangeRates , setExchangeRates] = useState()\n    // const [amountInFromCurrency , setAmountInFromCurrency] = useState(true)\n    // const [amount , setAmount] = useState(1)\n    // let fromAmount = 0 , toAmount = 0;\n    // if(amountInFromCurrency){\n    //     fromAmount = amount;\n    //     toAmount = amount*exchangeRates\n    // }else{\n    //     toAmount = amount;\n    //     fromAmount = amount/exchangeRates\n    // }\n    // useEffect(() => {\n    //     fetch(URL).then(res => res.json()).then(data => {\n    //         const firstCurrency = Object.keys(data.rates)[0]\n    //         setCurrencyOptions([data.base , ...Object.keys(data.rates)])\n    //         setFromCurrency(data.base)\n    //         setToCurrency(firstCurrency)\n    //         setExchangeRates(data.rates[firstCurrency])\n    //     })\n    // } , [])\n    // useEffect(() => {\n    //  if(fromCurrency != null && toCurrency != null){\n    //     fetch(`${URL}?base=${fromCurrency}&symbols=${toCurrency}`).then(res => res.json()).then(data => data.rates[toCurrency])\n    //  }\n    // }, [fromCurrency , toCurrency])\n    // function handleFrom (e){\n    //     setAmount(e.target.value)\n    //     setAmountInFromCurrency(true)\n    // }\n    // function handleTo (e){\n    //     setAmount(e.target.value)\n    //     setAmountInFromCurrency(false)\n    // }\n    // return(\n    //     <>\n    //             <h1>Convert</h1>\n    //             <Currency currencyOptions = {currencyOptions} \n    //              selectedCurrency = {fromCurrency} \n    //              amount = {fromAmount} \n    //              onChangeCurrency = {e => setFromCurrency(e.target.value)}\n    //               onChangeAmount = {handleFrom}\n\n    //               />\n    //             <h1>=</h1>\n    //             <Currency  currencyOptions = {currencyOptions} \n    //              selectedCurrency = {toCurrency} \n    //              amount = {toAmount} \n    //              onChangeCurrency = {e => setToCurrency(e.target.value)} \n    //              onChangeAmount = {handleTo}\n\n    //              />\n\n\n\n\n    //     </>\n    // )   \n}\n\nexport default App; \n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}